name: Build and Release Phoenix-FirestormOS OpenAL WebRTC AVX2 Windows64

on:
  workflow_dispatch:

jobs:
  setup:
    uses: ./.github/workflows/serverinstall.yml

  build:
    needs: setup
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Firestorm Build in Single CMD Process
        run: |
          @echo off
          setlocal enabledelayedexpansion

          rem Git link.exe Fix
          set "GIT_BIN=%ProgramFiles%\Git\usr\bin"
          if not exist "%GIT_BIN%" (
              set "GIT_BIN=%ProgramFiles(x86)%\Git\usr\bin"
          )
          if exist "%GIT_BIN%\link.exe" (
              ren "%GIT_BIN%\link.exe" glink.exe
              echo Git link.exe wurde erfolgreich in glink.exe umbenannt.
          )

          rem Dynamische VS-Erkennung
          set "VSWHERE=%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
          for /f "usebackq tokens=*" %%i in (`"%VSWHERE%" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do (
              set "VS2022BAT=%%i\VC\Auxiliary\Build\vcvarsall.bat"
          )
          call "%VS2022BAT%" x64

          rem Build-Umgebung
          set "SCRIPT_DIR=%CD%"
          set "BUILD_DIR=%SCRIPT_DIR%\Firestorm_Build"
          set "VENV_DIR=%BUILD_DIR%\venv"
          set "AUTOBUILD_TEMP=%SCRIPT_DIR%\temp"
          set "TMP=%AUTOBUILD_TEMP%"
          set "TEMP=%AUTOBUILD_TEMP%"
          set "FS_INCLUDE_SOURCE=%SCRIPT_DIR%\fs_include"
          set "FS_INCLUDE_DEST=%BUILD_DIR%\fs_include"
          set "PYTHON_BIN=%VENV_DIR%\Scripts\python.exe"

          mkdir "%BUILD_DIR%" 2>nul
          if not exist "%AUTOBUILD_TEMP%" mkdir "%AUTOBUILD_TEMP%"

          rem Python venv Setup
          if not exist "%PYTHON_BIN%" (
              python -m venv "%VENV_DIR%"
          )
          call "%VENV_DIR%\Scripts\activate.bat"
          "%PYTHON_BIN%" -m pip install --upgrade pip
          "%PYTHON_BIN%" -m pip install --force-reinstall --no-cache-dir llbase llsd autobuild

          rem Autobuild Verf端gbarkeit pr端fen
          "%PYTHON_BIN%" -m autobuild --version >nul 2>&1 || (
              echo [FEHLER] Autobuild nicht verf端gbar!
              exit /b 1
          )

          rem Git Repos klonen
          if not exist "%BUILD_DIR%\phoenix-firestorm\.git" (
              git clone "https://github.com/FirestormViewer/phoenix-firestorm.git" "%BUILD_DIR%\phoenix-firestorm"
          ) else (
              git -C "%BUILD_DIR%\phoenix-firestorm" pull
          )
          if not exist "%BUILD_DIR%\fs-build-variables\.git" (
              git clone "https://github.com/FirestormViewer/fs-build-variables.git" "%BUILD_DIR%\fs-build-variables"
          ) else (
              git -C "%BUILD_DIR%\fs-build-variables" pull
          )

          rem Includes kopieren
          if exist "%FS_INCLUDE_SOURCE%" (
              xcopy /E /I /Y "%FS_INCLUDE_SOURCE%" "%FS_INCLUDE_DEST%\" >nul
          )

          rem Setup f端r Autobuild
          set "AUTO_BUILD_CONFIG=%BUILD_DIR%\phoenix-firestorm\autobuild.xml"
          copy /Y "%SCRIPT_DIR%\fs_include\autobuild.xml" "%AUTO_BUILD_CONFIG%"
          "%PYTHON_BIN%" -m pip install -r "%BUILD_DIR%\phoenix-firestorm\requirements.txt"

          rem Installables setzen
          autobuild installables edit openal platform=windows64 url=https://github.com/secondlife/3p-openal-soft/releases/download/v1.24.2-r1/openal-1.24.2-r1-windows64-13245988487.tar.zst hash_algorithm=sha1 hash=8ad24fba1191c9cb0d2ab36e64b04b4648a99f43
          autobuild installables remove assimp
          autobuild installables add assimp platform=windows64 url=https://github.com/secondlife/3p-assimp/releases/download/v5.2.5-r3/assimp-windows64-5.2.5-r3.tar.bz2 hash=8b878487089380b43a8b2109dfc6ab8bbebd4009 hash_algorithm=sha1
          autobuild installables remove webrtc
          autobuild installables add webrtc platform=windows64 url=https://github.com/secondlife/3p-webrtc-build/releases/download/m114.5735.08.73-alpha/webrtc-m114.5735.08.73-alpha.11958809572-windows64-11958809572.tar.zst hash_algorithm=sha1 hash=c7b329d6409576af6eb5b80655b007f52639c43b

          rem Konfiguration & Build
          autobuild configure --config-file "%AUTO_BUILD_CONFIG%" -A 64 -c ReleaseFS_open -- --avx2 --openal --package --chan WebRTC --debug || exit /b 1
          autobuild build --config-file "%AUTO_BUILD_CONFIG%" -A 64 -c ReleaseFS_open --no-configure --debug || exit /b 1

      - name: Extrahiere Setup-Datei und Tag
        id: extract
        shell: bash
        run: |
          RELEASE_DIR="Firestorm_Build/phoenix-firestorm/build-vc170-64/newview/Release"
          SETUP_FILE=$(ls "$RELEASE_DIR"/*Setup.exe | head -n 1)
          [ -f "$SETUP_FILE" ] || exit 1
          BASENAME=$(basename "$SETUP_FILE")
          tmp=${BASENAME#Phoenix-FirestormOS-WebRTC_AVX2-}
          VERSION=${tmp%_Setup.exe}
          TAGNAME="${VERSION//-/.}"
          echo "setup_file=$SETUP_FILE" >> "$GITHUB_OUTPUT"
          echo "tag_name=$TAGNAME" >> "$GITHUB_OUTPUT"

      - name: Erstelle GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract.outputs.tag_name }}
          name: "Phoenix-FirestormOS OpenAL WebRTC AVX2 ${{ steps.extract.outputs.tag_name }}"
          body: "Unofficial Automatic Windows Nightly Build from Developer Version"
          files: ${{ steps.extract.outputs.setup_file }}
