name: Build and Release Phoenix-FirestormOS OpenAL WebRTC AVX2 Windows

on:
  workflow_dispatch:

jobs:
  setup:
    uses: ./.github/workflows/Windows_Server_2025_Setup.yaml

  build:
    needs: setup
    runs-on: windows-2025
    defaults:
      run:
        shell: cmd

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Installiere Python 3.13.3
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      - name: Phoenix Firestorm Build - Vereinfacht
        run: |
          @echo off
          setlocal enabledelayedexpansion
          
          echo ==============================================
          echo Phoenix Firestorm Build - Vereinfacht
          echo ==============================================
          
          :: Git-Konflikte vermeiden
          if exist "C:\Program Files\Git\usr\bin\link.exe" (
              ren "C:\Program Files\Git\usr\bin\link.exe" glink.exe >nul 2>&1
          )
          
          :: Build-Verzeichnisse
          set "BUILD_DIR=C:\FB"
          set "OUTPUT_DIR=%BUILD_DIR%\phoenix-firestorm\build-vc170-64\newview\Release"
          
          if not exist "%BUILD_DIR%" mkdir "%BUILD_DIR%"
          cd /d "%BUILD_DIR%"
          
          :: Python venv
          echo ========== PYTHON SETUP ==========
          python -m venv venv
          call venv\Scripts\activate.bat
          python -m pip install --upgrade pip
          python -m pip install llbase llsd autobuild
          if errorlevel 1 (
              echo FEHLER: Python Setup fehlgeschlagen!
              exit /b 1
          )
          
          :: Repository klonen
          echo ========== REPOSITORY CLONE ==========
          if not exist "phoenix-firestorm" (
              git clone https://github.com/FirestormViewer/phoenix-firestorm.git
              if errorlevel 1 (
                  echo FEHLER: Git Clone fehlgeschlagen!
                  exit /b 1
              )
          )
          
          cd phoenix-firestorm
          python -m pip install -r requirements.txt
          if errorlevel 1 (
              echo FEHLER: Requirements Installation fehlgeschlagen!
              exit /b 1
          )
          
          :: Autobuild Configure
          echo ========== AUTOBUILD CONFIGURE ==========
          autobuild configure -A 64 -c ReleaseFS_open -- --avx2 --openal --package --chan WebRTC
          if errorlevel 1 (
              echo FEHLER: Autobuild Configure fehlgeschlagen!
              echo ===== BUILD LOG =====
              if exist "build-vc170-64\logs\build_windows.log" (
                  type "build-vc170-64\logs\build_windows.log"
              )
              echo ===== CMAKE LOG =====
              if exist "build-vc170-64\CMakeFiles\CMakeConfigureLog.yaml" (
                  type "build-vc170-64\CMakeFiles\CMakeConfigureLog.yaml"
              )
              exit /b 1
          )
          
          :: Überprüfe Firestorm.sln
          if not exist "build-vc170-64\Firestorm.sln" (
              echo FEHLER: Firestorm.sln nicht generiert!
              echo Build-Verzeichnis Inhalt:
              dir "build-vc170-64\"
              exit /b 1
          )
          echo SUCCESS: Firestorm.sln gefunden
          
          :: Autobuild Build
          echo ========== AUTOBUILD BUILD ==========
          autobuild build -A 64 -c ReleaseFS_open --no-configure
          if errorlevel 1 (
              echo FEHLER: Autobuild Build fehlgeschlagen!
              echo ===== BUILD LOG =====
              if exist "build-vc170-64\logs\build_windows.log" (
                  type "build-vc170-64\logs\build_windows.log"
              )
              exit /b 1
          )
          
          :: Setup-Datei suchen
          echo ========== SETUP FILE SEARCH ==========
          if exist "%OUTPUT_DIR%\*Setup.exe" (
              for %%f in ("%OUTPUT_DIR%\*Setup.exe") do (
                  echo setup_file=%%f>>"%GITHUB_OUTPUT%"
                  echo Setup gefunden: %%f
              )
          ) else (
              echo FEHLER: Keine Setup.exe gefunden!
              echo Output-Verzeichnis Inhalt:
              dir "%OUTPUT_DIR%"
              exit /b 1
          )
          
          echo ========== BUILD ERFOLGREICH ==========
          
      - name: Firestorm Build fertig
        shell: cmd
        run: |
          echo Firestorm Build fertig!

  release:
    needs: build
    uses: ./.github/workflows/release.yaml
    with:
      setup_file: ${{ needs.build.outputs.setup_file }}
      tag_name: ${{ needs.build.outputs.tag_name }}
