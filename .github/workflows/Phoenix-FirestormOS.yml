name: Build and Release Phoenix-FirestormOS OpenAL WebRTC AVX2 Windows

on:
  workflow_dispatch:

jobs:
  setup:
    uses: ./.github/workflows/Windows_Server_2025_Setup.yaml

  build:
    needs: setup
    runs-on: windows-2025
    defaults:
      run:
        shell: cmd

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Installiere Python 3.13.3
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      - name: Firestorm Build in Single CMD Process
        run: |
          @echo off
          setlocal enabledelayedexpansion

          echo ‚ÑπÔ∏è Git-Konfliktbereinigung
          :: Git-Konflikte vermeiden (einfach und robust)
          if exist "C:\Program Files\Git\usr\bin\link.exe" (
              ren "C:\Program Files\Git\usr\bin\link.exe" glink.exe >nul 2>&1
              echo Git link.exe erfolgreich umbenannt
          )
          
          if exist "C:\Program Files (x86)\Git\usr\bin\link.exe" (
              ren "C:\Program Files (x86)\Git\usr\bin\link.exe" glink.exe >nul 2>&1
              echo Git link.exe x86 erfolgreich umbenannt
          )
          
          :: PATH bereinigen √ºbersprungen - Git-Konflikte durch Umbenennung bereits gel√∂st
          echo Git-Konflikte durch link.exe Umbenennung bereits behoben.
          
          :: Git-CMD-Pfad sicherstellen
          if exist "C:\Program Files\Git\cmd" (
              set "PATH=C:\Program Files\Git\cmd;%PATH%"
          ) else if exist "C:\Program Files (x86)\Git\cmd" (
              set "PATH=C:\Program Files (x86)\Git\cmd;%PATH%"
          )
          
          echo PATH f√ºr Git CMD gesetzt.

          echo ‚ÑπÔ∏è Dynamisch Visual Studio Toolchain finden
          echo DEBUG: Suche Visual Studio mit vswhere...
          set "VSWHERE=%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe"
          if not exist "%VSWHERE%" (
              echo vswhere.exe nicht gefunden!
              echo DEBUG: Versuche alternative Pfade...
              if exist "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" (
                  set "VSWHERE=C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe"
              ) else (
                  exit /b 1
              )
          )

          echo Suche Visual Studio Installation...
          set "VSINSTALL="
          for /f "usebackq delims=" %%i in (`"%VSWHERE%" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do (
              set "VSINSTALL=%%i"
              echo Gefunden: %%i
          )

          if "%VSINSTALL%"=="" (
              echo Visual Studio Installation nicht gefunden!
              exit /b 1
          )

          set "VSVARSALL=%VSINSTALL%\VC\Auxiliary\Build\vcvarsall.bat"
          if exist "%VSVARSALL%" (
              call "%VSVARSALL%" x64
              
              :: Zus√§tzliche Build-Umgebungsvariablen f√ºr Stabilit√§t
              set "MSBUILD_MAX_CPU_COUNT=1"
              set "UseMultipleWorkerProcesses=false"
              set "BuildInParallel=false"
              set "CL=/MP1"
              set "_CL_=%CL%"
              
              :: Windows SDK-Pfad sicherstellen
              echo Suche Windows SDK...
              for /f "usebackq delims=" %%i in (`"%VSWHERE%" -latest -products * -requires Microsoft.VisualStudio.Component.Windows10SDK -property installationPath 2^>nul`) do (
                  if exist "%%i\Windows Kits\10" (
                      set "WindowsSdkDir=%%i\Windows Kits\10"
                      echo Windows SDK gefunden: %%i\Windows Kits\10
                  )
              )
              
              echo Visual Studio Environment konfiguriert
              echo VSINSTALL: %VSINSTALL%
              echo WindowsSdkDir: %WindowsSdkDir%
              
              :: Exportiere wichtige VS-Umgebungsvariablen f√ºr Subprozesse
              echo Exportiere Visual Studio Umgebungsvariablen...
              echo Current PATH: %PATH%
              echo Current INCLUDE: %INCLUDE%
              echo Current LIB: %LIB%
              echo Current LIBPATH: %LIBPATH%
          ) else (
              echo Visual Studio Toolchain nicht gefunden unter %VSVARSALL%
              exit /b 1
          )

          echo ‚ÑπÔ∏è Build-Variablen
          set "SCRIPT_DIR=%CD%"
          :: K√ºrzere Pfade verwenden, um Windows-Pfadl√§ngenbegrenzungen zu vermeiden
          set "BUILD_DIR=C:\fbuild"
          set "VENV_DIR=%BUILD_DIR%\venv"
          set "AUTOBUILD_INSTALL_DIR=%BUILD_DIR%\packages"
          set "ARCH=64"
          set "CONFIG=ReleaseFS_open"
          set "OUTPUT_DIR=%BUILD_DIR%\phoenix-firestorm\build-vc170-64\newview\Release"
          set "AUTO_BUILD_CONFIG=%BUILD_DIR%\phoenix-firestorm\autobuild.xml"
          set "AUTOBUILD_VARIABLES_FILE=%BUILD_DIR%\fs-build-variables\variables"
          set "AUTOBUILD_TEMP=C:\ftemp"
          set "TMP=%AUTOBUILD_TEMP%"
          set "TEMP=%AUTOBUILD_TEMP%"
          set "FS_INCLUDE_SOURCE=%SCRIPT_DIR%\fs_include"
          set "FS_INCLUDE_DEST=%BUILD_DIR%\fs_include"
          
          :: CMake Compiler-Pfade explizit setzen
          for /f "tokens=*" %%i in ('where cl.exe 2^>nul') do set "CMAKE_C_COMPILER=%%i"
          for /f "tokens=*" %%i in ('where cl.exe 2^>nul') do set "CMAKE_CXX_COMPILER=%%i"
          echo CMAKE_C_COMPILER: %CMAKE_C_COMPILER%
          echo CMAKE_CXX_COMPILER: %CMAKE_CXX_COMPILER%

          mkdir "%BUILD_DIR%" 2>nul
          if not exist "%AUTOBUILD_TEMP%" mkdir "%AUTOBUILD_TEMP%"

          echo ‚ÑπÔ∏è Python venv
          if not exist "%VENV_DIR%" (
              python -m venv "%VENV_DIR%"
              call "%VENV_DIR%\Scripts\activate.bat"
              python -m pip install --upgrade pip
              python -m pip install --force-reinstall --no-cache-dir llbase llsd autobuild
          ) else (
              call "%VENV_DIR%\Scripts\activate.bat"
          )

          echo ‚ÑπÔ∏è Ressourcen kopieren
          if exist "%FS_INCLUDE_SOURCE%" (
              xcopy /E /I /Y "%FS_INCLUDE_SOURCE%" "%FS_INCLUDE_DEST%\" >nul
          )

          set "OPENAL_ROOT=%FS_INCLUDE_DEST%\openal-1.24.2-r1-windows64-13245988487"

          echo ‚ÑπÔ∏è Repositories klonen
          if not exist "%BUILD_DIR%\phoenix-firestorm\.git" (
              git clone "https://github.com/FirestormViewer/phoenix-firestorm.git" "%BUILD_DIR%\phoenix-firestorm"
          ) else (
              git -C "%BUILD_DIR%\phoenix-firestorm" pull
          )

          if not exist "%BUILD_DIR%\fs-build-variables\.git" (
              git clone "https://github.com/FirestormViewer/fs-build-variables.git" "%BUILD_DIR%\fs-build-variables"
          ) else (
              git -C "%BUILD_DIR%\fs-build-variables" pull
          )

          :: üîÑ Zus√§tzliche Dateien holen oder aktualisieren
          if not exist "%BUILD_DIR%\fs-build-firestorm-viewer-german\.git" (
              git clone "https://github.com/ManfredAabye/fs-build-firestorm-viewer-german.git" "%BUILD_DIR%\fs-build-firestorm-viewer-german"
          ) else (
              git -C "%BUILD_DIR%\fs-build-firestorm-viewer-german" pull
          )

          echo ‚ÑπÔ∏è Zus√§tzliche Dateien kopieren
          xcopy /y "%BUILD_DIR%\fs-build-firestorm-viewer-german\fs_include\vivox_logo.png" "%BUILD_DIR%\phoenix-firestorm\indra\newview\skins\default\textures\3p_icons\" 2>nul
          xcopy /E /I /Y "%BUILD_DIR%\fs-build-firestorm-viewer-german\Skin\skins.xml" "%BUILD_DIR%\phoenix-firestorm\indra\newview\skins" 2>nul
          xcopy /E /I /Y "%BUILD_DIR%\fs-build-firestorm-viewer-german\Skin\singularity" "%BUILD_DIR%\phoenix-firestorm\indra\newview\skins\singularity" 2>nul
          xcopy /E /I /Y "%BUILD_DIR%\fs-build-firestorm-viewer-german\fs_include\OPENAL.cmake" "%BUILD_DIR%\phoenix-firestorm\indra\cmake" 2>nul

          echo ‚ÑπÔ∏è Autobuild vorbereiten
          set "AUTOBUILD_VSVER=170"
          python -m pip install -r "%BUILD_DIR%\phoenix-firestorm\requirements.txt"
          copy /Y "%SCRIPT_DIR%\fs_include\autobuild.xml" "%BUILD_DIR%\phoenix-firestorm\autobuild.xml"

          echo ‚ÑπÔ∏è Installables konfigurieren
          cd /d "%BUILD_DIR%\phoenix-firestorm"
          
          autobuild installables edit openal platform=windows64 url=https://github.com/secondlife/3p-openal-soft/releases/download/v1.24.2-r1/openal-1.24.2-r1-windows64-13245988487.tar.zst hash_algorithm=sha1 hash=8ad24fba1191c9cb0d2ab36e64b04b4648a99f43
          if errorlevel 1 echo WARNUNG: OpenAL installables Konfiguration fehlgeschlagen
                  
          autobuild installables remove webrtc 2>nul
          autobuild installables add webrtc platform=windows64 url=https://github.com/secondlife/3p-webrtc-build/releases/download/m114.5735.08.73-alpha/webrtc-m114.5735.08.73-alpha.11958809572-windows64-11958809572.tar.zst hash_algorithm=sha1 hash=c7b329d6409576af6eb5b80655b007f52639c43b
          if errorlevel 1 echo WARNUNG: WebRTC installables Konfiguration fehlgeschlagen

          echo ‚ÑπÔ∏è Build starten
          echo Starte Build Prozess...
          
          echo ‚ÑπÔ∏è Debugging: √úberpr√ºfe Autobuild-Konfiguration
          if not exist "%AUTO_BUILD_CONFIG%" (
              echo FEHLER: autobuild.xml nicht gefunden unter %AUTO_BUILD_CONFIG%
              exit /b 1
          )
          
          echo ‚ÑπÔ∏è Configure-Phase
          cd /d "%BUILD_DIR%\phoenix-firestorm"
          
          :: Erzwinge CMD statt bash f√ºr autobuild
          set "AUTOBUILD_WIN32_CMAKE_GENERATOR=Visual Studio 17 2022"
          set "SHELL=cmd"
          
          echo Starte Configure mit folgender Konfiguration:
          echo - Config-Datei: %AUTO_BUILD_CONFIG%
          echo - Arbeitsverzeichnis: %CD%
          echo - Architektur: 64
          echo - Konfiguration: ReleaseFS_open
          echo - CMAKE_C_COMPILER: %CMAKE_C_COMPILER%
          echo - CMAKE_CXX_COMPILER: %CMAKE_CXX_COMPILER%
          
          autobuild configure --config-file "%AUTO_BUILD_CONFIG%" -A 64 -c ReleaseFS_open -- --avx2 --openal --package --chan WebRTC
          set "CONFIGURE_EXIT_CODE=%ERRORLEVEL%"
          
          if %CONFIGURE_EXIT_CODE% neq 0 (
              echo FEHLER: Configure fehlgeschlagen mit Code %CONFIGURE_EXIT_CODE%!
              echo ========== CONFIGURE-LOGS ANALYSIEREN ==========
              if exist "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\logs\build_windows.log" (
                  echo Inhalt von build_windows.log:
                  type "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\logs\build_windows.log"
              )
              if exist "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\CMakeFiles\CMakeConfigureLog.yaml" (
                  echo CMake Configure Log:
                  type "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\CMakeFiles\CMakeConfigureLog.yaml"
              )
              echo ================================================
              dir /s "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\" 2>nul
              exit /b 1
          )
          
          echo ‚ÑπÔ∏è √úberpr√ºfe ob Firestorm.sln generiert wurde
          if not exist "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\Firestorm.sln" (
              echo FEHLER: Firestorm.sln wurde nicht generiert!
              echo Verf√ºgbare Dateien im Build-Verzeichnis:
              dir /b "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\" 2>nul
              exit /b 1
          ) else (
              echo ‚úÖ Firestorm.sln erfolgreich generiert
          )
          
          echo ‚ÑπÔ∏è Build-Phase
          echo Starte Build in: %CD%
          autobuild build --config-file "%AUTO_BUILD_CONFIG%" -A 64 -c ReleaseFS_open --no-configure --verbose
          if errorlevel 1 (
              echo FEHLER: Build fehlgeschlagen mit Code %ERRORLEVEL%!
              echo √úberpr√ºfe Build-Verzeichnis...
              if exist "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\" (
                  dir /s "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\" 2>nul
              )
              echo √úberpr√ºfe Output-Verzeichnis...
              if exist "%OUTPUT_DIR%" (
                  dir /b "%OUTPUT_DIR%" 2>nul
              ) else (
                  echo Output-Verzeichnis %OUTPUT_DIR% existiert nicht!
              )
              exit /b 1
          )

          echo ‚ÑπÔ∏è Build erfolgreich abgeschlossen
          if exist "%OUTPUT_DIR%" (
              echo Inhalt des Output-Verzeichnisses:
              dir /b "%OUTPUT_DIR%"
          ) else (
              echo WARNUNG: Output-Verzeichnis %OUTPUT_DIR% nicht gefunden
          )
          @REM Oberhalb darf nichts ver√§ndert werden, wir befinden uns noch im CMD bereich der Build wurde erstellt und tr√§gt den Namen (Platzhalter=*): Phoenix-FirestormOS-WebRTC_AVX2-*_Setup.exe

          echo ‚ÑπÔ∏è Setup-Datei extrahieren
          setlocal EnableDelayedExpansion
          set "RELEASE_DIR=%OUTPUT_DIR%"
          set "SETUP_FILE="
          
          echo Suche Setup-Datei in: %RELEASE_DIR%
          if not exist "%RELEASE_DIR%" (
              echo FEHLER: Release-Verzeichnis %RELEASE_DIR% existiert nicht!
              
              :: Fallback: Suche in anderen m√∂glichen Verzeichnissen
              echo Suche in alternativen Verzeichnissen...
              set "ALT_DIRS=%BUILD_DIR%\phoenix-firestorm\build-vc170-64\newview;%BUILD_DIR%\phoenix-firestorm\build-vc170-64;%BUILD_DIR%\phoenix-firestorm"
              
              for %%d in ("%ALT_DIRS:;=" "%") do (
                  if exist "%%~d" (
                      echo Gefunden: %%~d
                      for /r "%%~d" %%f in (*Setup.exe) do (
                          if exist "%%f" (
                              set "SETUP_FILE=%%f"
                              set "RELEASE_DIR=%%~d"
                              echo Setup-Datei gefunden in: %%f
                              goto :found
                          )
                      )
                  )
              )
              
              echo FEHLER: Keine Setup.exe in bekannten Verzeichnissen gefunden!
              echo Verf√ºgbare Dateien im Build-Verzeichnis:
              if exist "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\" (
                  dir /s /b "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\*.exe" 2>nul
              )
              exit /b 1
          )
          
          :: Hauptsuche nach Setup-Datei
          for %%F in ("%RELEASE_DIR%\*Setup.exe") do (
              if exist "%%F" (
                  set "SETUP_FILE=%%F"
                  goto :found
              )
          )
          
          :: Fallback: Rekursive Suche
          echo Setup.exe nicht im Hauptverzeichnis gefunden, suche rekursiv...
          for /r "%RELEASE_DIR%" %%F in (*Setup.exe) do (
              if exist "%%F" (
                  set "SETUP_FILE=%%F"
                  goto :found
              )
          )
          
          echo FEHLER: Setup.exe nicht gefunden
          echo Verf√ºgbare Dateien im Release-Verzeichnis:
          dir /b "%RELEASE_DIR%" 2>nul
          exit /b 1
          
          :found
          echo Setup-Datei gefunden: !SETUP_FILE!
          for %%A in ("!SETUP_FILE!") do set "BASENAME=%%~nxA"
          set "tmp=!BASENAME:Phoenix-FirestormOS-WebRTC_AVX2-=!"
          set "VERSION=!tmp:_Setup.exe=!"
          set "TAGNAME=!VERSION:-=.!"
          
          echo Extrahierte Version: !VERSION!
          echo Tag-Name: !TAGNAME!
          
          echo setup_file=!SETUP_FILE!>>"%GITHUB_OUTPUT%"
          echo tag_name=!TAGNAME!>>"%GITHUB_OUTPUT%"

          echo ‚ÑπÔ∏è Release-Verzeichnis Inhalt:
          dir /b "%RELEASE_DIR%" 2>nul
          
      - name: Firestorm Build fertig
        shell: cmd
        run: |
          echo Firestorm Build fertig!

  release:
    needs: build
    uses: ./.github/workflows/release.yaml
    with:
      setup_file: ${{ needs.build.outputs.setup_file }}
      tag_name: ${{ needs.build.outputs.tag_name }}
