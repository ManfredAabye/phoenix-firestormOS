name: Build and Release Phoenix-FirestormOS OpenAL WebRTC AVX2 Windows

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    env:
      PYTHON_VERSION: '3.10.11'
      BUILD_DIR: '${{ github.workspace }}\\Firestorm_Build'
      VENV_DIR: '${{ github.workspace }}\\Firestorm_Build\\venv'
      AUTO_BUILD_CONFIG: '${{ github.workspace }}\\Firestorm_Build\\phoenix-firestorm\\autobuild.xml'
      FS_INCLUDE_SOURCE: '${{ github.workspace }}\\fs_include'
      FS_INCLUDE_DEST: '${{ github.workspace }}\\Firestorm_Build\\fs_include'
      AUTOBUILD_TEMP: '${{ github.workspace }}\\temp'
      TMP: '${{ github.workspace }}\\temp'
      TEMP: '${{ github.workspace }}\\temp'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Create directories
      shell: cmd
      run: |
        IF NOT EXIST "%BUILD_DIR%" mkdir "%BUILD_DIR%"
        IF NOT EXIST "%AUTOBUILD_TEMP%" mkdir "%AUTOBUILD_TEMP%"

    - name: Check and install CMake
      shell: powershell
      run: |
        $baseDir = "${{ github.workspace }}"
        $cmakeDir = Join-Path $baseDir "cmake-3.29.2-windows-x86_64"
        $cmakeBin = Join-Path $cmakeDir "bin"

        if (-not (Get-Command cmake -ErrorAction SilentlyContinue)) {
          Write-Host "ðŸ”§ CMake nicht gefunden. Installation wird gestartet..."
          $url = "https://github.com/Kitware/CMake/releases/download/v3.29.2/cmake-3.29.2-windows-x86_64.zip"
          $zip = Join-Path $baseDir "cmake.zip"
          Invoke-WebRequest -Uri $url -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath $baseDir -Force
          $env:Path = "$cmakeBin;" + $env:Path
          [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
          Write-Host "âœ… CMake wurde installiert"
        } else {
          $version = cmake --version
          Write-Host "âœ… CMake ist bereits installiert: $version"
        }

    - name: Check and install Doxygen
      shell: powershell
      run: |
        $baseDir = "${{ github.workspace }}"
        $doxygenDir = Join-Path $baseDir "doxygen-1.9.8.windows.x64.bin"
        $doxygenBin = Join-Path $doxygenDir "bin"

        if (-not (Get-Command doxygen -ErrorAction SilentlyContinue)) {
          Write-Host "ðŸ”§ Doxygen nicht gefunden. Installation wird gestartet..."
          $url = "https://www.doxygen.nl/files/doxygen-1.9.8.windows.x64.bin.zip"
          $zip = Join-Path $baseDir "doxygen.zip"
          Invoke-WebRequest -Uri $url -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath $baseDir -Force
          $env:Path = "$doxygenBin;" + $env:Path
          [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
          Write-Host "âœ… Doxygen wurde installiert"
        } else {
          $version = doxygen --version
          Write-Host "âœ… Doxygen ist bereits installiert: $version"
        }

    - name: Check and install Git
      shell: powershell
      run: |
        if (-not (Get-Command git -ErrorAction SilentlyContinue)) {
          Write-Host "ðŸ”§ Git nicht gefunden. Installation wird gestartet..."
          $url = "https://github.com/git-for-windows/git/releases/download/v2.43.0.windows.1/Git-2.43.0-64-bit.exe"
          $exe = "$env:TEMP\\git.exe"
          Invoke-WebRequest -Uri $url -OutFile $exe
          Start-Process -FilePath $exe -ArgumentList "/VERYSILENT", "/NORESTART", "/SUPPRESSMSGBOXES" -Wait
          # Git wird automatisch zum PATH hinzugefÃ¼gt
          Write-Host "âœ… Git wurde installiert"
        } else {
          $version = git --version
          Write-Host "âœ… Git ist bereits installiert: $version"
        }

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up virtual environment
      shell: cmd
      run: |
        python -m venv "%VENV_DIR%"
        call "%VENV_DIR%\\Scripts\\activate.bat"
        python -m pip install --upgrade pip
        python -m pip install --force-reinstall --no-cache-dir llbase llsd autobuild

    - name: Clone Firestorm repositories
      shell: cmd
      run: |
        if not exist "%BUILD_DIR%\\phoenix-firestorm" (
          git clone https://github.com/FirestormViewer/phoenix-firestorm.git "%BUILD_DIR%\\phoenix-firestorm"
        )
        if not exist "%BUILD_DIR%\\fs-build-variables" (
          git clone https://github.com/FirestormViewer/fs-build-variables.git "%BUILD_DIR%\\fs-build-variables"
        )

    - name: Copy fs_include and skin files
      shell: cmd
      run: |
        if not exist "%FS_INCLUDE_DEST%" mkdir "%FS_INCLUDE_DEST%"
        if exist "%FS_INCLUDE_SOURCE%" (
          xcopy /E /I /Y "%FS_INCLUDE_SOURCE%" "%FS_INCLUDE_DEST%\\"
        )
        if not exist "%BUILD_DIR%\\phoenix-firestorm\\indra\\newview\\skins\\default\\textures\\3p_icons" (
          mkdir "%BUILD_DIR%\\phoenix-firestorm\\indra\\newview\\skins\\default\\textures\\3p_icons"
        )
        if exist "fs_include\\vivox_logo.png" (
          xcopy /Y "fs_include\\vivox_logo.png" "%BUILD_DIR%\\phoenix-firestorm\\indra\\newview\\skins\\default\\textures\\3p_icons\\"
        )
        if not exist "%BUILD_DIR%\\phoenix-firestorm\\indra\\newview\\skins" (
          mkdir "%BUILD_DIR%\\phoenix-firestorm\\indra\\newview\\skins"
        )
        if exist "Skin\\skins.xml" (
          xcopy /Y "Skin\\skins.xml" "%BUILD_DIR%\\phoenix-firestorm\\indra\\newview\\skins\\"
        )
        if not exist "%BUILD_DIR%\\phoenix-firestorm\\indra\\newview\\skins\\singularity" (
          mkdir "%BUILD_DIR%\\phoenix-firestorm\\indra\\newview\\skins\\singularity"
        )
        if exist "Skin\\singularity" (
          xcopy /E /I /Y "Skin\\singularity" "%BUILD_DIR%\\phoenix-firestorm\\indra\\newview\\skins\\singularity\\"
        )
        if not exist "%BUILD_DIR%\\phoenix-firestorm\\indra\\cmake" (
          mkdir "%BUILD_DIR%\\phoenix-firestorm\\indra\\cmake"
        )
        if exist "fs_include\\OPENAL.cmake" (
          xcopy /Y "fs_include\\OPENAL.cmake" "%BUILD_DIR%\\phoenix-firestorm\\indra\\cmake\\"
        )
        if exist "fs_include\\Assimp.cmake" (
          xcopy /Y "fs_include\\Assimp.cmake" "%BUILD_DIR%\\phoenix-firestorm\\indra\\cmake\\"
        )

    - name: Install Python requirements
      shell: cmd
      run: |
        call "%VENV_DIR%\\Scripts\\activate.bat"
        if exist "%BUILD_DIR%\\phoenix-firestorm\\requirements.txt" (
          python -m pip install -r "%BUILD_DIR%\\phoenix-firestorm\\requirements.txt"
        )

    - name: Copy autobuild.xml
      shell: cmd
      run: |
        if exist "%FS_INCLUDE_SOURCE%\\autobuild.xml" (
          copy /Y "%FS_INCLUDE_SOURCE%\\autobuild.xml" "%BUILD_DIR%\\phoenix-firestorm\\autobuild.xml"
        )

    - name: Setup Visual Studio environment
      shell: cmd
      run: |
        set "VS2022BAT="
        for %%D in ("C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise", "C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional", "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community") do (
          if exist "%%~D\\VC\\Auxiliary\\Build\\vcvarsall.bat" (
            set "VS2022BAT=%%~D\\VC\\Auxiliary\\Build\\vcvarsall.bat"
          )
        )
        if defined VS2022BAT (
          echo "Visual Studio gefunden: %VS2022BAT%"
          call "%VS2022BAT%" x64
        ) else (
          echo "Fehler: Visual Studio 2022 nicht gefunden!"
          exit 1
        )

    - name: Install Autobuild packages
      shell: cmd
      run: |
        call "%VENV_DIR%\\Scripts\\activate.bat"
        autobuild installables edit openal platform=windows64 url=https://github.com/secondlife/3p-openal-soft/releases/download/v1.24.2-r1/openal-1.24.2-r1-windows64-13245988487.tar.zst hash_algorithm=sha1 hash=8ad24fba1191c9cb0d2ab36e64b04b4648a99f43
        autobuild installables remove assimp
        autobuild installables add assimp platform=windows64 url=https://github.com/secondlife/3p-assimp/releases/download/v5.2.5-r3/assimp-windows64-5.2.5-r3.tar.bz2 hash=8b878487089380b43a8b2109dfc6ab8bbebd4009 hash_algorithm=sha1
        autobuild installables remove webrtc
        autobuild installables add webrtc platform=windows64 url=https://github.com/secondlife/3p-webrtc-build/releases/download/m114.5735.08.73-alpha/webrtc-m114.5735.08.73-alpha.11958809572-windows64-11958809572.tar.zst hash_algorithm=sha1 hash=c7b329d6409576af6eb5b80655b007f52639c43b

    - name: Configure and build
      shell: cmd
      run: |
        call "%VENV_DIR%\\Scripts\\activate.bat"
        autobuild configure --config-file "%AUTO_BUILD_CONFIG%" -A 64 -c ReleaseFS_open -- --avx2 --openal --package --chan WebRTC
        autobuild build --config-file "%AUTO_BUILD_CONFIG%" -A 64 -c ReleaseFS_open --no-configure --verbose
