name: Build and Release Phoenix-FirestormOS OpenAL WebRTC AVX2 Windows

on:
  workflow_dispatch:

jobs:
  setup:
    uses: ./.github/workflows/Windows_Server_2025_Setup.yaml

  build:
    needs: setup
    runs-on: windows-2025
    defaults:
      run:
        shell: cmd

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Installiere Python 3.13.3
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      - name: Firestorm Build wie 2_firestorm_building_V45.bat
        run: |
          @echo off
          setlocal enabledelayedexpansion
          
          echo ==============================================
          echo Firestorm Build nach V45.bat Vorlage
          echo ==============================================
          
          :: Git-Konflikte vermeiden (wie in V45.bat)
          set "PATH=%PATH:C:\Program Files\Git\usr\bin;=%"
          if exist "C:\Program Files\Git\usr\bin\link.exe" (
              ren "C:\Program Files\Git\usr\bin\link.exe" glink.exe >nul 2>&1
          )
          
          :: Visual Studio Environment (wie in V45.bat)
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          if errorlevel 1 (
              echo Fallback zu BuildTools...
              call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" x64
              if errorlevel 1 (
                  echo FEHLER: Visual Studio vcvarsall.bat nicht gefunden!
                  exit /b 1
              )
          )
          
          :: Build-Verzeichnisse (vereinfacht wie V45.bat)
          set "SCRIPT_DIR=%CD%"
          set "BUILD_DIR=%SCRIPT_DIR%\Firestorm_Build"
          set "VENV_DIR=%BUILD_DIR%\venv"
          set "ARCH=64"
          set "CONFIG=ReleaseFS_open"
          set "OUTPUT_DIR=%BUILD_DIR%\phoenix-firestorm\build-vc170-64\newview\Release"
          set "AUTO_BUILD_CONFIG=%BUILD_DIR%\phoenix-firestorm\autobuild.xml"
          set "AUTOBUILD_VARIABLES_FILE=%BUILD_DIR%\fs-build-variables\variables"
          set "AUTOBUILD_VSVER=170"
          
          :: TEMP-Umleitung (wie V45.bat)
          set "AUTOBUILD_TEMP=%SCRIPT_DIR%\temp"
          if not exist "%AUTOBUILD_TEMP%" mkdir "%AUTOBUILD_TEMP%"
          set "TMP=%AUTOBUILD_TEMP%"
          set "TEMP=%AUTOBUILD_TEMP%"
          
          mkdir "%BUILD_DIR%" 2>nul
          
          :: Python venv (wie V45.bat)
          echo ========== PYTHON SETUP ==========
          if not exist "%VENV_DIR%" (
              python -m venv "%VENV_DIR%"
              call "%VENV_DIR%\Scripts\activate.bat"
              python -m pip install --upgrade pip
              python -m pip install --force-reinstall --no-cache-dir llbase llsd autobuild
          ) else (
              call "%VENV_DIR%\Scripts\activate.bat"
          )
          
          :: Repositories klonen (wie V45.bat)
          echo ========== REPOSITORY CLONE ==========
          if not exist "%BUILD_DIR%\phoenix-firestorm\.git" (
              git clone "https://github.com/FirestormViewer/phoenix-firestorm.git" "%BUILD_DIR%\phoenix-firestorm"
          ) else (
              git -C "%BUILD_DIR%\phoenix-firestorm" pull
          )
          
          if not exist "%BUILD_DIR%\fs-build-variables\.git" (
              git clone "https://github.com/FirestormViewer/fs-build-variables.git" "%BUILD_DIR%\fs-build-variables"
          ) else (
              git -C "%BUILD_DIR%\fs-build-variables" pull
          )
          
          :: Zusätzliche Repositories für Deutsche Version (wie V45.bat)
          if not exist "%BUILD_DIR%\fs-build-firestorm-viewer-german\.git" (
              git clone "https://github.com/ManfredAabye/fs-build-firestorm-viewer-german.git" "%BUILD_DIR%\fs-build-firestorm-viewer-german"
          ) else (
              git -C "%BUILD_DIR%\fs-build-firestorm-viewer-german" pull
          )
          
          :: fs_include kopieren (wichtig für copy_w_viewer_manifest!)
          echo ========== FS_INCLUDE KOPIEREN ==========
          set "FS_INCLUDE_SOURCE=%SCRIPT_DIR%\fs_include"
          set "FS_INCLUDE_DEST=%BUILD_DIR%\fs_include"
          
          if exist "%FS_INCLUDE_SOURCE%" (
              xcopy /E /I /Y "%FS_INCLUDE_SOURCE%" "%FS_INCLUDE_DEST%\" >nul
              echo fs_include erfolgreich kopiert
          ) else (
              echo WARNUNG: fs_include nicht gefunden in: %FS_INCLUDE_SOURCE%
          )
          
          :: Zusätzliche Dateien kopieren (wie V45.bat)
          echo ========== ZUSÄTZLICHE DATEIEN ==========
          xcopy /y "%BUILD_DIR%\fs-build-firestorm-viewer-german\fs_include\vivox_logo.png" "%BUILD_DIR%\phoenix-firestorm\indra\newview\skins\default\textures\3p_icons\" 2>nul
          xcopy /E /I /Y "%BUILD_DIR%\fs-build-firestorm-viewer-german\Skin\skins.xml" "%BUILD_DIR%\phoenix-firestorm\indra\newview\skins" 2>nul
          xcopy /E /I /Y "%BUILD_DIR%\fs-build-firestorm-viewer-german\Skin\singularity" "%BUILD_DIR%\phoenix-firestorm\indra\newview\skins\singularity" 2>nul
          xcopy /E /I /Y "%BUILD_DIR%\fs-build-firestorm-viewer-german\fs_include\OPENAL.cmake" "%BUILD_DIR%\phoenix-firestorm\indra\cmake" 2>nul
          xcopy /E /I /Y "%BUILD_DIR%\fs-build-firestorm-viewer-german\fs_include\Assimp.cmake" "%BUILD_DIR%\phoenix-firestorm\indra\cmake" 2>nul
          
          :: Requirements installieren (wie V45.bat)
          cd /d "%BUILD_DIR%\phoenix-firestorm"
          python -m pip install -r requirements.txt
          if errorlevel 1 (
              echo FEHLER: Requirements Installation fehlgeschlagen!
              exit /b 1
          )
          
          :: 3p Bibliotheken konfigurieren (exakt wie V45.bat)
          echo ========== 3P BIBLIOTHEKEN ==========
          echo FMOD Studio entfernen...
          autobuild installables remove fmodstudio 2>nul
          
          echo OpenAL konfigurieren...
          autobuild installables edit openal platform=windows64 url=https://github.com/secondlife/3p-openal-soft/releases/download/v1.24.2-r1/openal-1.24.2-r1-windows64-13245988487.tar.zst hash_algorithm=sha1 hash=8ad24fba1191c9cb0d2ab36e64b04b4648a99f43
          
          echo WebRTC konfigurieren...
          autobuild installables remove webrtc 2>nul
          autobuild installables add webrtc platform=windows64 url=https://github.com/secondlife/3p-webrtc-build/releases/download/m114.5735.08.73-alpha/webrtc-m114.5735.08.73-alpha.11958809572-windows64-11958809572.tar.zst hash_algorithm=sha1 hash=c7b329d6409576af6eb5b80655b007f52639c43b
          
          :: Autobuild Configure (exakt wie V45.bat)
          echo ========== AUTOBUILD CONFIGURE ==========
          echo AUTOBUILD_VARIABLES_FILE: %AUTOBUILD_VARIABLES_FILE%
          if not exist "%AUTOBUILD_VARIABLES_FILE%" (
              echo WARNUNG: AUTOBUILD_VARIABLES_FILE nicht gefunden: %AUTOBUILD_VARIABLES_FILE%
              echo Erstelle leere Variables-Datei...
              echo # Auto-generated variables file > "%AUTOBUILD_VARIABLES_FILE%"
          )
          
          :: Wichtig: Setze spezifische Umgebungsvariablen für OpenAL
          set "USE_OPENAL=ON"
          set "FMOD=OFF"
          set "LL_TESTS=OFF"
          
          echo Starte Configure mit expliziten Parametern...
          echo - OpenAL: aktiviert
          echo - WebRTC: aktiviert  
          echo - AVX2: aktiviert
          echo - Package: aktiviert
          
          :: Probiere verschiedene Configure-Ansätze
          echo === ERSTER VERSUCH: Standard Parameter ===
          autobuild configure --config-file="%AUTO_BUILD_CONFIG%" -A 64 -c ReleaseFS_open -- --avx2 --openal --package --chan WebRTC
          set "CONFIGURE_EXIT=%ERRORLEVEL%"
          
          if %CONFIGURE_EXIT% neq 0 (
              echo === ZWEITER VERSUCH: Mit CMAKE-Defines ===
              autobuild configure --config-file="%AUTO_BUILD_CONFIG%" -A 64 -c ReleaseFS_open -- --avx2 --openal --package --chan WebRTC -DLL_TESTS:BOOL=FALSE -DFMOD:BOOL=OFF -DUSE_OPENAL:BOOL=ON
              set "CONFIGURE_EXIT=%ERRORLEVEL%"
          )
          
          if %CONFIGURE_EXIT% neq 0 (
              echo === DRITTER VERSUCH: Direkte Flags ===
              autobuild configure --config-file="%AUTO_BUILD_CONFIG%" -A 64 -c ReleaseFS_open --openal --avx2 --package --chan WebRTC
              set "CONFIGURE_EXIT=%ERRORLEVEL%"
          )
          if %CONFIGURE_EXIT% neq 0 (
              echo FEHLER: Alle Configure-Versuche fehlgeschlagen!
              echo ===== CONFIGURE DEBUG INFO =====
              echo Prüfe autobuild.xml Konfiguration:
              if exist "%AUTO_BUILD_CONFIG%" (
                  echo autobuild.xml gefunden
                  findstr /i "openal\|webrtc\|avx2" "%AUTO_BUILD_CONFIG%" 2>nul
              ) else (
                  echo FEHLER: autobuild.xml nicht gefunden!
              )
              
              echo Prüfe configure_firestorm.sh Log:
              if exist "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\logs\build_windows.log" (
                  findstr /i "openal\|webrtc\|avx2\|package" "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\logs\build_windows.log" 2>nul
              )
              
              echo ===== AUTOBUILD DEBUG =====
              autobuild --help 2>nul | findstr /i "configure\|openal\|avx2" 2>nul
              
              exit /b 1
          )
          
          :: Prüfe ob Configure erfolgreich war
          echo ========== CONFIGURE VERIFICATION ==========
          if exist "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\logs\build_windows.log" (
              echo Checking configure results:
              type "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\logs\build_windows.log" | findstr /i "openal\|webrtc\|avx2\|package"
              
              :: Prüfe kritische Flags
              findstr /c:"OPENAL: true" "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\logs\build_windows.log" >nul
              if errorlevel 1 (
                  echo KRITISCHER FEHLER: OPENAL nicht aktiviert!
                  echo Das wird den copy_w_viewer_manifest Fehler verursachen!
                  
                  :: Zeige vollständiges Log für Debugging
                  echo ===== VOLLSTÄNDIGES CONFIGURE LOG =====
                  type "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\logs\build_windows.log"
                  exit /b 1
              ) else (
                  echo SUCCESS: OPENAL aktiviert
              )
              
              findstr /c:"PACKAGE: true" "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\logs\build_windows.log" >nul
              if errorlevel 1 (
                  echo WARNUNG: PACKAGE nicht aktiviert!
              ) else (
                  echo SUCCESS: PACKAGE aktiviert
              )
              
              findstr /c:"AVX2: true" "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\logs\build_windows.log" >nul
              if errorlevel 1 (
                  echo WARNUNG: AVX2 nicht aktiviert!
              ) else (
                  echo SUCCESS: AVX2 aktiviert
              )
          )
          
          :: Firestorm.sln prüfen
          if not exist "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\Firestorm.sln" (
              echo FEHLER: Firestorm.sln nicht generiert!
              exit /b 1
          )
          echo SUCCESS: Firestorm.sln gefunden
          
          :: Autobuild Build (exakt wie V45.bat)
          echo ========== AUTOBUILD BUILD ==========
          autobuild build --config-file "%AUTO_BUILD_CONFIG%" -A 64 -c ReleaseFS_open --no-configure --verbose
          if errorlevel 1 (
              echo FEHLER: Build fehlgeschlagen!
              echo ===== DETAILLIERTE FEHLERANALYSE =====
              if exist "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\logs\build_windows.log" (
                  echo Build Windows Log:
                  type "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\logs\build_windows.log"
              )
              if exist "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\CMakeFiles\CMakeError.log" (
                  echo CMake Error Log:
                  type "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\CMakeFiles\CMakeError.log"
              )
              echo Prüfe copy_w_viewer_manifest Verzeichnis:
              if exist "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\newview\" (
                  dir "%BUILD_DIR%\phoenix-firestorm\build-vc170-64\newview\*manifest*" 2>nul
              )
              exit /b 1
          )
          
          :: OpenAL DLLs kopieren (wichtig nach dem Build!)
          echo ========== OPENAL DLLS KOPIEREN ==========
          if exist "%FS_INCLUDE_DEST%\OpenAL32.dll" (
              copy /Y "%FS_INCLUDE_DEST%\OpenAL32.dll" "%OUTPUT_DIR%\" >nul 2>&1
              echo OpenAL32.dll kopiert
          )
          if exist "%FS_INCLUDE_DEST%\alut.dll" (
              copy /Y "%FS_INCLUDE_DEST%\alut.dll" "%OUTPUT_DIR%\" >nul 2>&1
              echo alut.dll kopiert
          )
          if exist "%FS_INCLUDE_DEST%\featuretable.txt" (
              copy /Y "%FS_INCLUDE_DEST%\featuretable.txt" "%OUTPUT_DIR%\" >nul 2>&1
              echo featuretable.txt kopiert
          )
          
          :: Package erstellen (wie V45.bat)
          echo ========== PACKAGE ERSTELLEN ==========
          autobuild package -A 64 --config-file autobuild.xml
          if errorlevel 1 (
              echo FEHLER: Package fehlgeschlagen!
              exit /b 1
          )
          
          :: Setup-Datei suchen (wie V45.bat)
          echo ========== SETUP FILE SEARCH ==========
          for %%f in ("%OUTPUT_DIR%\*_Setup.exe") do (
              if exist "%%f" (
                  echo setup_file=%%f>>"%GITHUB_OUTPUT%"
                  echo Setup gefunden: %%f
                  goto :found
              )
          )
          
          echo FEHLER: Keine Setup.exe gefunden!
          dir "%OUTPUT_DIR%"
          exit /b 1
          
          :found
          echo ========== BUILD ERFOLGREICH ==========
          
      - name: Firestorm Build fertig
        shell: cmd
        run: |
          echo Firestorm Build fertig!

  release:
    needs: build
    uses: ./.github/workflows/release.yaml
    with:
      setup_file: ${{ needs.build.outputs.setup_file }}
      tag_name: ${{ needs.build.outputs.tag_name }}
