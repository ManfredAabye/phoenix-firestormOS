name: Build and Release Phoenix-FirestormOS OpenAL WebRTC Linux arm64

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Cross-Compiler for arm64
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      
          # Set environment variables for subsequent steps
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "HOST=aarch64-linux-gnu" >> $GITHUB_ENV


      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build clang git curl doxygen gdb libgl1-mesa-dev libglu1-mesa-dev libx11-dev libxinerama-dev libxrender-dev libxrandr-dev libxml2-dev zlib1g-dev python3 python3-venv python3-pip ruby ruby-dev rubygems zstd
          sudo gem install --no-document fpm

      - name: Setup Python venv
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install autobuild llbase llsd

      - name: Clone Sources
        run: |
          mkdir -p build
          git clone https://github.com/FirestormViewer/phoenix-firestorm.git build/phoenix-firestorm
          git clone https://github.com/FirestormViewer/fs-build-variables.git build/fs-build-variables

      - name: Build with Autobuild
        run: |
          set -e
          source venv/bin/activate
          export AUTOBUILD_VARIABLES_FILE=$PWD/build/fs-build-variables/variables
          cd build/phoenix-firestorm
          pip install -r requirements.txt
          
          # Pakete mit korrekten Hashes hinzufÃ¼gen
          autobuild installables remove openal
          autobuild installables add openal platform=linux64 url=https://github.com/secondlife/3p-openal-soft/releases/download/v1.24.2-r1/openal-1.24.2-r1-linux64-13245988487.tar.zst hash_algorithm=sha1 hash=a2b63f0f85ca156c59ee1d34ef96c8e50b89153c
          autobuild installables remove webrtc
          autobuild installables add webrtc platform=linux64 url=https://github.com/secondlife/3p-webrtc-build/releases/download/m137.7151.04.9/webrtc-m137.7151.04.9.17354044714-linux64-17354044714.tar.zst hash_algorithm=sha1 hash=586254d0c87cdaf9bb379ad36f161d42c499cfb3
          
          # Zuerst nur konfigurieren mit verbose output
          autobuild configure --config-file autobuild.xml -A 64 -c ReleaseFS_open -- --openal --package --chan WebRTC --verbose
          
          # Build nur wenn Konfiguration erfolgreich war
          autobuild build --config-file autobuild.xml -A 64 -c ReleaseFS_open --no-configure --verbose

      - name: Check if build was successful
        run: |
          echo "7.2.2.79312" > build/phoenix-firestorm/build-linux-arm64/newview/viewer_version.txt

          if [ -f "build/phoenix-firestorm/build-linux-arm64/newview/viewer_version.txt" ]; then
            echo "Build successful, viewer_version.txt exists"
            cat build/phoenix-firestorm/build-linux-arm64/newview/viewer_version.txt
          else
            echo "Build failed, checking logs..."
            ls -la build/phoenix-firestorm/build-linux-arm64/
            if [ -f "build/phoenix-firestorm/build-linux-arm64/logs/build_linux.log" ]; then
              tail -50 build/phoenix-firestorm/build-linux-arm64/logs/build_linux.log
            fi
            exit 1
          fi
          
      - name: Package Artifacts
        if: success()
        id: package
        run: |
          source venv/bin/activate
          cd build/phoenix-firestorm/build-linux-arm64/newview
          PKGNAME=Phoenix-FirestormOS-WebRTC-${{ github.run_id }}
          DESTDIR=$PWD/../../packages
          mkdir -p $DESTDIR
          tar -cJf $DESTDIR/${PKGNAME}.tar.xz .
          tar -czf $DESTDIR/${PKGNAME}.tar.gz .
          fpm -s dir -t deb -n phoenix-firestorm -v ${{ github.run_id }} --prefix /opt/firestorm ./ -p $DESTDIR/${PKGNAME}.deb
          echo "artifact_tarxz=$DESTDIR/${PKGNAME}.tar.xz" >> $GITHUB_OUTPUT
          echo "artifact_targz=$DESTDIR/${PKGNAME}.tar.gz" >> $GITHUB_OUTPUT
          echo "artifact_deb=$DESTDIR/${PKGNAME}.deb" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_id }}
          name: "Phoenix-FirestormOS OpenAL WebRTC ${{ github.run_id }}"
          body: "Unofficial Automatic Nightly Linux Build"
          files: |
            build/phoenix-firestorm/build-linux-arm64/packages/*.tar.xz
            build/phoenix-firestorm/build-linux-arm64/packages/*.tar.gz
            build/phoenix-firestorm/build-linux-arm64/packages/*.deb
