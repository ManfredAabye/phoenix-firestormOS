name: Build and Release Phoenix-FirestormOS OpenAL WebRTC AVX2 Windows

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    env:
      PYTHON_VERSION: '3.10.11'
      BUILD_DIR: '${{ github.workspace }}\\Firestorm_Build'
      VENV_DIR: '${{ github.workspace }}\\Firestorm_Build\\venv'
      AUTOBUILD_INSTALL_DIR: '${{ github.workspace }}\\Firestorm_Build\\packages'
      ARCH: '64'
      CONFIG: 'ReleaseFS_open'
      AUTO_BUILD_CONFIG: '${{ github.workspace }}\\Firestorm_Build\\phoenix-firestorm\\autobuild.xml'
      AUTOBUILD_VARIABLES_FILE: '${{ github.workspace }}\\Firestorm_Build\\fs-build-variables\\variables'
      FS_INCLUDE_SOURCE: '${{ github.workspace }}\\fs_include'
      FS_INCLUDE_DEST: '${{ github.workspace }}\\Firestorm_Build\\fs_include'
      AUTOBUILD_TEMP: '${{ github.workspace }}\\temp'
      TMP: '${{ github.workspace }}\\temp'
      TEMP: '${{ github.workspace }}\\temp'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Chocolatey and Build Tools
      shell: cmd
      run: |
        if not exist "%ProgramData%\\Chocolatey\\bin\\choco.exe" (
          echo [INFO] Installiere Chocolatey...
          powershell -NoProfile -ExecutionPolicy Bypass -Command "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; iex (New-Object Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')"
          timeout /t 30
          call "%ProgramData%\\Chocolatey\\bin\\refreshEnv.cmd"
        )

        choco install -y --no-progress visualstudio2022community ^
          --package-parameters="--add Microsoft.VisualStudio.Workload.NativeDesktop ^
          --add Microsoft.VisualStudio.Component.VC.14.16.x86.x64 ^
          --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64"

        choco install -y --no-progress --stop-on-first-failure ^
          cmake ^
          git ^
          python ^
          nsis ^
          cygwin ^
          7zip ^
          doxygen

          cygwinsetup.exe -q -P patch


    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Create directories
      shell: cmd
      run: |
        mkdir "%BUILD_DIR%"
        mkdir "%AUTOBUILD_TEMP%"

    - name: Set up virtual environment
      shell: cmd
      run: |
        python -m venv "%VENV_DIR%"
        call "%VENV_DIR%\\Scripts\\activate.bat"
        python -m pip install --upgrade pip
        python -m pip install --force-reinstall --no-cache-dir llbase llsd autobuild

    - name: Clone Firestorm repositories
      shell: cmd
      run: |
        if not exist "%BUILD_DIR%\\phoenix-firestorm\\.git" (
          git clone https://github.com/FirestormViewer/phoenix-firestorm.git "%BUILD_DIR%\\phoenix-firestorm"
        ) else (
          git -C "%BUILD_DIR%\\phoenix-firestorm" pull
        )
        if not exist "%BUILD_DIR%\\fs-build-variables\\.git" (
          git clone https://github.com/FirestormViewer/fs-build-variables.git "%BUILD_DIR%\\fs-build-variables"
        ) else (
          git -C "%BUILD_DIR%\\fs-build-variables" pull
        )

    - name: Copy fs_include and skin files
      shell: cmd
      run: |
        xcopy /E /I /Y "%FS_INCLUDE_SOURCE%" "%FS_INCLUDE_DEST%\\"
        xcopy /y fs_include\\vivox_logo.png Firestorm_Build\\phoenix-firestorm\\indra\\newview\\skins\\default\\textures\\3p_icons\\
        xcopy /E /I /Y Skin\\skins.xml Firestorm_Build\\phoenix-firestorm\\indra\\newview\\skins
        xcopy /E /I /Y Skin\\singularity Firestorm_Build\\phoenix-firestorm\\indra\\newview\\skins\\singularity
        xcopy /E /I /Y fs_include\\OPENAL.cmake Firestorm_Build\\phoenix-firestorm\\indra\\cmake
        xcopy /E /I /Y fs_include\\Assimp.cmake Firestorm_Build\\phoenix-firestorm\\indra\\cmake

    - name: Install Python requirements
      shell: cmd
      run: |
        call "%VENV_DIR%\\Scripts\\activate.bat"
        python -m pip install -r "%BUILD_DIR%\\phoenix-firestorm\\requirements.txt"

    - name: Copy autobuild.xml
      shell: cmd
      run: |
        copy /Y "%FS_INCLUDE_SOURCE%\\autobuild.xml" "%BUILD_DIR%\\phoenix-firestorm\\autobuild.xml"

    - name: Setup Visual Studio environment
      shell: cmd
      run: |
        set "VS2022BAT="
        for %%D in ("C:\\Program Files\\Microsoft Visual Studio\\2022\\Community") do (
          if exist "%%~D\\VC\\Auxiliary\\Build\\vcvarsall.bat" (
            set "VS2022BAT=%%~D\\VC\\Auxiliary\\Build\\vcvarsall.bat"
          )
        )
        call "%VS2022BAT%" x64

    - name: Install Autobuild packages
      shell: cmd
      run: |
        call "%VENV_DIR%\\Scripts\\activate.bat"
        autobuild installables edit openal platform=windows64 url=https://github.com/secondlife/3p-openal-soft/releases/download/v1.24.2-r1/openal-1.24.2-r1-windows64-13245988487.tar.zst hash_algorithm=sha1 hash=8ad24fba1191c9cb0d2ab36e64b04b4648a99f43
        autobuild installables remove assimp
        autobuild installables add assimp platform=windows64 url=https://github.com/secondlife/3p-assimp/releases/download/v5.2.5-r3/assimp-windows64-5.2.5-r3.tar.bz2 hash=8b878487089380b43a8b2109dfc6ab8bbebd4009 hash_algorithm=sha1
        autobuild installables remove webrtc
        autobuild installables add webrtc platform=windows64 url=https://github.com/secondlife/3p-webrtc-build/releases/download/m114.5735.08.73-alpha/webrtc-m114.5735.08.73-alpha.11958809572-windows64-11958809572.tar.zst hash_algorithm=sha1 hash=c7b329d6409576af6eb5b80655b007f52639c43b

    - name: Configure and build
      shell: cmd
      run: |
        autobuild configure --config-file "%AUTO_BUILD_CONFIG%" -A 64 -c ReleaseFS_open -- --avx2 --openal --package --chan WebRTC
        autobuild build --config-file "%AUTO_BUILD_CONFIG%" -A 64 -c ReleaseFS_open --no-configure --verbose
